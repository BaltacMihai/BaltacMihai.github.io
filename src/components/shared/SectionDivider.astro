---
import generateRandomId from "../../assets/utils/generateId";

const {
  text,
  speed = 1,
  initialPosition = -250,
  borderSize = "3px",
} = Astro.props;

const styleVariableIntialPosition = `${initialPosition}px`;
const generatedId = generateRandomId(10);
---

<div class="border">
  <h2 class="js_animated_text" id={generatedId}>{text}</h2>
</div>

<script define:vars={{ speed, initialPosition, generatedId, text }}>
  const animatedText = document.getElementById(generatedId);
  const wordWidth = animatedText.offsetWidth;

  let wordsArray = [];

  for (let i = 0; i < window.screen.width / wordWidth; i++) {
    wordsArray.push(`<span class='generated-word'>${text}</span>`);
  }

  animatedText.innerHTML = wordsArray.join("");

  let marginLeft = initialPosition;
  let lastScrollPos = 0;

  window.addEventListener("scroll", () => {
    const section = animatedText.parentElement;
    const sectionTop = section.offsetTop;
    const sectionBottom = sectionTop + section.offsetHeight;
    const windowHeight = window.innerHeight;

    const scrollPos = window.scrollY;

    if (scrollPos + windowHeight >= sectionTop && scrollPos < sectionBottom) {
      // If scrolling down, move text from left to right
      if (scrollPos > lastScrollPos) {
        animatedText.style.marginLeft = `${marginLeft}px`;
        if (marginLeft < 0) {
          marginLeft += parseInt(speed);
        }
      }
      // If scrolling up, move text from right to left
      else if (scrollPos < lastScrollPos) {
        animatedText.style.marginLeft = `${marginLeft}px`;
        if (marginLeft > -animatedText.offsetWidth) {
          marginLeft -= parseInt(speed);
        }
      }

      lastScrollPos = scrollPos;
    } else {
      animatedText.style.marginLeft = `${marginLeft}px`;
      marginLeft = initialPosition;
    }
  });
</script>

<style lang="scss" define:vars={{ styleVariableIntialPosition, borderSize }}>
  @use "../../assets/scss" as *;

  .border {
    border-top: var(--borderSize) solid black;
    border-bottom: var(--borderSize) solid black;

    width: 100vw;
    margin-left: -13%;

    @include tablet {
      overflow-x: hidden;
      margin-left: -6%;
    }
    h2 {
      margin-left: var(--styleVariableIntialPosition);
      width: fit-content;
      @extend %header-size;

      @include mobile {
        font-size: 3.5rem;
      }

      :global(.generated-word) {
        margin: 0 1.5rem;

        // :global(i) {
        //   margin-left: -15px;
        // }
      }
    }
  }
</style>
