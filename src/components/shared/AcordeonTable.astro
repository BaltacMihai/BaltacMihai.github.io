---
import minimizeIcon from "./../../assets/icons/minimize.svg";
import maximizeIcon from "./../../assets/icons/maximize.svg";
import generateRandomId from "../../assets/utils/generateId";

const { title, description, items,isClosed } = Astro.props;


const contentId = title + "-" + generateRandomId(3);
const minimizeId = "minimize-" + generateRandomId(3);
const maximizeId = "maximize-" + generateRandomId(3);
---

<div class="acordion-table">
  <div class="header">
    <h3>{title}</h3>
    <p>{description}</p>
    <div class="actions">
      <img src={minimizeIcon} alt="minimize-icon" id={minimizeId} />
      <img src={maximizeIcon} alt="maximize-icon" id={maximizeId} />
    </div>
  </div>
  <div class="items" id={contentId}>
    {

      items?.map((item,index) => {
        const isRepeated = index > 0 && item.date.value === items[index - 1].date.value;
        const className = isRepeated ? "date repeated" : "date";
            return (
                <div class="item">
                    <div class={className}>
                        {item.date.type=="single" ? 
                            <p>{item.date.value}</p> : 
                            (
                            <p>{item.date.startingDate}</p>
                            <p>-</p>
                            <p>{item.date.endingDate}</p>
                            )
                        }
                    </div>
                    <div class="content">
                    <h4 class="title">{item.title}</h4>
                    <p id={`${contentId}-item-${index}`}>
                        {typeof item.description == "string" ?
                         item.description : 
                         (
                            item.description?.map(paragraf => {
                                return (<span>{paragraf}</span>)
                            })
                        )

                    }
                    </p>
                    </div>
                </div>
            );
      })
    }


  </div>
</div>

<script define:vars={{ minimizeId, maximizeId, contentId,isClosed }} is:inline>
  const minimizeBtn = document.getElementById(minimizeId);
  const maximizeBtn = document.getElementById(maximizeId);
  const content = document.getElementById(contentId);


const openContent = (content,minimizeBtn,maximizeBtn) =>{
    content.style.display = "flex";
    maximizeBtn.style.display = "none";
    minimizeBtn.style.display = "block";
}

const closeContent = (content,minimizeBtn,maximizeBtn) =>{
    content.style.display = "none";
    minimizeBtn.style.display = "none";
    maximizeBtn.style.display = "block";
}

function closeInnerContent(innerContentId,innerMinimizeId, innerMaximizeId){
    const minimizeBtn = document.getElementById(innerMinimizeId);
  const maximizeBtn = document.getElementById(innerMaximizeId);
  const content = document.getElementById(innerContentId);
  closeContent(content,minimizeBtn,maximizeBtn)
}

function openInnerContent(innerContentId,innerMinimizeId, innerMaximizeId){
    const minimizeBtn = document.getElementById(innerMinimizeId);
  const maximizeBtn = document.getElementById(innerMaximizeId);
  const content = document.getElementById(innerContentId);
  openContent(content,minimizeBtn,maximizeBtn)
}


  //default
  maximizeBtn.style.display = "none";

  //minimize the content
  minimizeBtn.addEventListener("click", () => {
    closeContent(content,minimizeBtn,maximizeBtn)
  });

  //maximize the content
  maximizeBtn.addEventListener("click", () => {
    openContent(content,minimizeBtn,maximizeBtn)
  });

  if(isClosed){
    closeContent(content,minimizeBtn,maximizeBtn)
  }
</script>

<style lang="scss">
  @use "../../assets/scss" as *;

  %borderStyle {
    border: 1px solid #676;
    padding: 1rem;
    border-radius: 10px;
  }

  .acordion-table {
    display: flex;
    flex-direction: column;
    margin-bottom: 2rem;
    @extend %borderStyle;

   

    .header {
      border-bottom: 1px solid #676;
      position: relative;
      padding-bottom: 0.5rem;
    

      h3 {
        @extend %subtitle-size;
        @include mobile{
            width: 80%;
      }
      }

      .actions {
        position: absolute;
        right: 0;
        top: 0;

        img {
          cursor: pointer;
        }
      }
    }
    .items {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      padding-top: 1rem;

     

      .item {
        display: flex;
        gap: 1rem;
        position: relative;
        .actions {
        position: absolute;
        right: 1rem;
        top: 1rem;

        img {
          cursor: pointer;
        }
      }

        @include mobile{
        flex-direction: column;
        }

        .date {
          @extend %borderStyle;
          text-align: center;
          height: fit-content;
          @include mobile{
                display: flex;
                justify-content: center;
      }
      
      &.repeated{
            opacity: 0;
            @include mobile{
                opacity: 1;
      }
          }
          p {
            @extend %paragraf-size;
            
          }
        }
        .content {
          @extend %borderStyle;
          width: 100%;
          @include mobile{
            width: fit-content;
      }

          .title {
            @extend %paragraf-size;
            @include mobile{
           text-align: center;
      }
          }
          p {
            padding: 0.5rem;
            @extend %small-size;
            color: $cl-grey;
            @include mobile{
           text-align: center;
      }

            span{
                display: block;
                padding: 5px 0;
                @include mobile{
                    padding: 7.5px 0;
      }
            }
          }
        }
      }
    }
  }
</style>
